Index: org/xbill/DNS/Lookup.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- org/xbill/DNS/Lookup.java	(revision 1695)
+++ org/xbill/DNS/Lookup.java	(revision )
@@ -179,6 +179,15 @@
 	defaultSearchPath = newdomains;
 }
 
+/**
+ * Sets a custom logger that will be used to log the send and received packets.
+ * @param logger
+ */
+public static void setCustomLogger(CustomLogger logger)
+{
+    Client.setCustomLogger(logger);
+}
+
 private final void
 reset() {
 	iterations = 0;
Index: org/xbill/DNS/UDPClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- org/xbill/DNS/UDPClient.java	(revision 1695)
+++ org/xbill/DNS/UDPClient.java	(revision )
@@ -110,7 +110,10 @@
 void
 send(byte [] data) throws IOException {
 	DatagramChannel channel = (DatagramChannel) key.channel();
-	verboseLog("UDP write", data);
+	verboseLog(
+        channel.socket().getLocalSocketAddress(),
+        channel.socket().getRemoteSocketAddress(),
+        "UDP write", data);
 	channel.write(ByteBuffer.wrap(data));
 }
 
@@ -133,7 +136,10 @@
 	int len = (int) ret;
 	byte [] data = new byte[len];
 	System.arraycopy(temp, 0, data, 0, len);
-	verboseLog("UDP read", data);
+	verboseLog(
+        channel.socket().getLocalSocketAddress(),
+        channel.socket().getRemoteSocketAddress(),
+        "UDP read", data);
 	return data;
 }
 
Index: org/xbill/DNS/CustomLogger.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- org/xbill/DNS/CustomLogger.java	(revision )
+++ org/xbill/DNS/CustomLogger.java	(revision )
@@ -0,0 +1,15 @@
+package org.xbill.DNS;
+
+import java.net.*;
+
+/**
+ * Custom logger that can log all the packets that were send or received.
+ * @author Damian Minkov
+ */
+public interface CustomLogger
+{
+    public void log(SocketAddress local,
+                    SocketAddress remote,
+                    String prefix,
+                    byte [] data);
+}
Index: org/xbill/DNS/TCPClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- org/xbill/DNS/TCPClient.java	(revision 1695)
+++ org/xbill/DNS/TCPClient.java	(revision )
@@ -41,7 +41,10 @@
 void
 send(byte [] data) throws IOException {
 	SocketChannel channel = (SocketChannel) key.channel();
-	verboseLog("TCP write", data);
+	verboseLog(
+        channel.socket().getLocalSocketAddress(),
+        channel.socket().getRemoteSocketAddress(),
+        "TCP write", data);
 	byte [] lengthArray = new byte[2];
 	lengthArray[0] = (byte)(data.length >>> 8);
 	lengthArray[1] = (byte)(data.length & 0xFF);
@@ -103,7 +106,11 @@
 	byte [] buf = _recv(2);
 	int length = ((buf[0] & 0xFF) << 8) + (buf[1] & 0xFF);
 	byte [] data = _recv(length);
-	verboseLog("TCP read", data);
+    SocketChannel channel = (SocketChannel) key.channel();
+	verboseLog(
+        channel.socket().getLocalSocketAddress(),
+        channel.socket().getRemoteSocketAddress(),
+        "TCP read", data);
 	return data;
 }
 
Index: org/xbill/DNS/Client.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- org/xbill/DNS/Client.java	(revision 1695)
+++ org/xbill/DNS/Client.java	(revision )
@@ -12,6 +12,11 @@
 protected long endTime;
 protected SelectionKey key;
 
+/**
+ * Custom logger if available.
+ */
+private static CustomLogger customLogger = null;
+
 protected
 Client(SelectableChannel channel, long endTime) throws IOException {
 	boolean done = false;
@@ -44,15 +49,25 @@
 }
 
 static protected void
-verboseLog(String prefix, byte [] data) {
+verboseLog(SocketAddress local, SocketAddress remote,
+           String prefix, byte [] data) {
 	if (Options.check("verbosemsg"))
 		System.err.println(hexdump.dump(prefix, data));
+    if (customLogger != null)
+    {
+        customLogger.log(local, remote, prefix, data);
-}
+    }
+}
 
 void
 cleanup() throws IOException {
 	key.selector().close();
 	key.channel().close();
+}
+
+static void setCustomLogger(CustomLogger logger)
+{
+    customLogger = logger;
 }
 
 }
