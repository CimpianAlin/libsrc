Index: source/org/jivesoftware/smack/XMPPConnection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- source/org/jivesoftware/smack/XMPPConnection.java	(revision 12975)
+++ source/org/jivesoftware/smack/XMPPConnection.java	(revision )
@@ -30,6 +30,7 @@
 import javax.net.ssl.KeyManagerFactory;
 import javax.net.ssl.SSLContext;
 import javax.net.ssl.SSLSocket;
+import javax.net.ssl.X509TrustManager;
 import javax.security.auth.callback.Callback;
 import javax.security.auth.callback.CallbackHandler;
 import javax.security.auth.callback.PasswordCallback;
@@ -78,6 +79,11 @@
     Roster roster = null;
 
     /**
+     * Custom trust manager.
+     */
+    private X509TrustManager customTrustManager = null;
+
+    /**
      * Collection of available stream compression methods offered by the server.
      */
     private Collection<String> compressionMethods;
@@ -184,6 +190,16 @@
         return user;
     }
 
+     /**
+      * Set custom trust manager.
+      *
+      * @param customTrustManager
+      */
+     public void setCustomTrustManager(X509TrustManager customTrustManager)
+     {
+         this.customTrustManager = customTrustManager;
+     }
+
     @Override
     public synchronized void login(String username, String password, String resource) throws XMPPException {
         if (!isConnected()) {
@@ -791,13 +807,21 @@
         }
 
         // Verify certificate presented by the server
+        if(customTrustManager == null)
-        context.init(kms,
+            context.init(kms,
-                new javax.net.ssl.TrustManager[]{new ServerTrustManager(getServiceName(), config)},
+                    new javax.net.ssl.TrustManager[]{
+                            new ServerTrustManager(getServiceName(), config)},
-                new java.security.SecureRandom());
+                    new java.security.SecureRandom());
+         else
+             context.init(kms,
+                     new javax.net.ssl.TrustManager[]{
+                         customTrustManager},
+                     new java.security.SecureRandom());
+
         Socket plain = socket;
         // Secure the plain connection
         socket = context.getSocketFactory().createSocket(plain,
-                plain.getInetAddress().getHostName(), plain.getPort(), true);
+                plain.getInetAddress().getHostAddress(), plain.getPort(), true);
         socket.setSoTimeout(0);
         socket.setKeepAlive(true);
         // Initialize the reader and writer with the new secured version
@@ -981,5 +1005,14 @@
         if (!this.wasAuthenticated) {
             this.wasAuthenticated = wasAuthenticated;
         }
+    }
+
+    /**
+     * The currently used socket.
+     * @return the currently used socket.
+     */
+    public Socket getSocket()
+    {
+        return socket;
     }
 }
